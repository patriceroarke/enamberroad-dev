<?php
/**
 * @file
 * selective_tweets.install
 */

/**
 * Implements hook_requirements().
 */
function selective_tweets_requirements($phase) {
  $requirements = array();

  if ($phase == 'runtime') {
    $required_settings = array(
      'selective_tweets_consumer_key',
      'selective_tweets_consumer_secret',
      'selective_tweets_oauth_token',
      'selective_tweets_oauth_token_secret',
    );

    $requirements['selective_tweets_settings'] = array(
      'title' => t('Selective Tweets settings'),
      'value' => t('Settings are present.'),
      'severity' => REQUIREMENT_OK,
    );

    foreach ($required_settings as $setting) {
      $setting_value = variable_get($setting, NULL);
      if (empty($setting_value)) {
        $requirements['selective_tweets_settings']['value'] = t('Settings are missing. (<a href="@url">Settings</a>)', array(
          '@url' => url('admin/config/services/selective-tweets'),
        ));
        $requirements['selective_tweets_settings']['severity'] = REQUIREMENT_ERROR;

        break;
      }
    }
  }

  return $requirements;
}

/**
 * Implements hook_schema().
 */
function selective_tweets_schema() {
  $schema['selective_tweets_block'] = array(
    'description' => 'The table for storing Selective Tweets blocks.',
    'fields' => array(
      'delta' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        'description' => "The block's {block}.delta.",
      ),
      'info' => array(
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Block description.',
      ),
      'data' => array(
        'type' => 'blob',
        'size' => 'big',
        'not null' => TRUE,
        'serialize' => TRUE,
        'description' => 'Serialized data containing the timeline properties.',
      ),
      'pull_cache_expire' => array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'UNIX timestamp of the time when cached tweets need to be supplemented with new Tweets.',
      ),
      'stack_cache_expire' => array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => 'UNIX timestamp of the time when cached tweets need to be dropped before adding new Tweets.',
      ),
    ),
    'primary key' => array('delta'),
  );

  // Add the cache table.
  $schema['cache_selective_tweets'] = drupal_get_schema_unprocessed('system', 'cache');

  return $schema;
}

/**
 * Implements hook_uninstall().
 */
function selective_tweets_uninstall() {
  // Remove blocks.
  db_delete('block')
    ->condition('module', 'selective_tweets')
    ->execute();
  db_delete('block_role')
    ->condition('module', 'selective_tweets')
    ->execute();
  db_delete('block_node_type')
    ->condition('module', 'selective_tweets')
    ->execute();

  // Remove variables.
  $variables = array(
    'selective_tweets_api_base_url',
    'selective_tweets_api_version',
    'selective_tweets_consumer_key',
    'selective_tweets_consumer_secret',
    'selective_tweets_oauth_token',
    'selective_tweets_oauth_token_secret',
    'selective_tweets_debug',
  );

  foreach ($variables as $variable) {
    variable_del($variable);
  }
}

/**
 * Rename cache_expire table field to pull_cache_expire and add new table field
 * stack_cache_expire.
 */
function selective_tweets_update_7001(&$sandbox) {
  db_change_field('selective_tweets_block', 'cache_expire', 'pull_cache_expire', array(
    'type' => 'int',
    'not null' => TRUE,
    'description' => 'UNIX timestamp of the time when cached tweets need to be supplemented with new Tweets.',
  ));

  db_add_field('selective_tweets_block', 'stack_cache_expire', array(
    'type' => 'int',
    'not null' => TRUE,
    'description' => 'UNIX timestamp of the time when cached tweets need to be dropped before adding new Tweets.',
    'default' => REQUEST_TIME,
  ));
}

/**
 * Add machine name (delta) to support features export and rename the 'bid'
 * field to 'delta' in block related tables. Add custom cache bin.
 *
 * WARNING: The blocks' deltas are about to be modified. Several contrib modules
 * use the delta to store block configuration. This update is updating native
 * block tables and panels. If you suspect other modules to use a block's delta,
 * it's recommended to either delete the block and rebuild it after this update,
 * or if you know what you're doing, adjust the block's delta manually in
 * database.
 */
function selective_tweets_update_7002(&$sandbox) {
  // Removed key for info field.
  db_drop_unique_key('selective_tweets_block', 'info');

  // Change bid field column type to store machine name and rename the field to
  // 'delta'.
  db_change_field('selective_tweets_block', 'bid', 'delta', array(
    'type' => 'varchar',
    'length' => 128,
    'not null' => TRUE,
    'default' => '',
    'description' => "The block's {block}.delta.",
  ));

  // Add machine name values for existing rows.
  $result = db_select('selective_tweets_block', 's')
    ->fields('s')
    ->execute();

  while ($record = $result->fetchAssoc()) {
    $machine_readable = drupal_strtolower($record['info']);
    $machine_readable = preg_replace('@[^a-z0-9_]+@', '_', $machine_readable);
    $machine_readable = preg_replace('/[_]+/', '_', $machine_readable);
    $machine_readable = trim($machine_readable, '_');
    $machine_readable = substr($machine_readable, 0, 32);

    // Update delta in block table.
    db_update('block')
      ->condition('module', 'selective_tweets', '=')
      ->condition('delta', $record['delta'], '=')
      ->fields(array(
        'delta' => $machine_readable,
      ))
      ->execute();

    // Update delta in block_node_type table.
    db_update('block_node_type')
      ->condition('module', 'selective_tweets', '=')
      ->condition('delta', $record['delta'], '=')
      ->fields(array(
        'delta' => $machine_readable,
      ))
      ->execute();

    // Update delta in block_role table.
    db_update('block_role')
      ->condition('module', 'selective_tweets', '=')
      ->condition('delta', $record['delta'], '=')
      ->fields(array(
        'delta' => $machine_readable,
      ))
      ->execute();

    // Update delta in selective_tweets_block table.
    db_update('selective_tweets_block')
      ->condition('delta', $record['delta'], '=')
      ->fields(array(
        'delta' => $machine_readable,
      ))
      ->execute();

    // Update block in panels if existing.
    if (db_table_exists('panels_pane')) {
      db_update('panels_pane')
      ->condition('subtype',  'selective_tweets-' . $record['delta'], '=')
      ->fields(array(
        'subtype' => 'selective_tweets-' . $machine_readable,
      ))
      ->execute();
    }
  }

  // Add custom cache bin.
  if (!db_table_exists(SELECTIVE_TWEETS_CACHE_BIN)) {
    db_create_table(SELECTIVE_TWEETS_CACHE_BIN, drupal_get_schema_unprocessed('system', 'cache'));
  }

  return t('The machine names of the Selective Tweets blocks have been changed. This may result in new block HTML id\'s, hence changed your block\'s layout.');
}
